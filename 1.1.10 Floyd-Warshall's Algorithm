#include <stdio.h>
#define INF 99999
#define MAX_N 20 // Maximum value for N
#include <stdio.h>
#define INF 99999
#define MAX_N 20
int main() {
	int N, E;
    int dist[MAX_N][MAX_N];

    printf("Enter the number of vertices : ");
    scanf("%d", &N);

    printf("Enter the number of edges : ");
    scanf("%d", &E);

    // Initialize adjacency matrix
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            if (i == j)
                dist[i][j] = 0;
            else
                dist[i][j] = INF;
        }
    }

    // Input edges
    for (int i = 0; i < E; i++) {
        int u, v, w;
        printf("Enter source : ");
        scanf("%d", &u);
        printf("Enter destination : ");
        scanf("%d", &v);
        printf("Enter weight : ");
        scanf("%d", &w);

        dist[u][v] = w; // directed edge
    }

    // Floyd-Warshall algorithm
    for (int k = 1; k <= N; k++) {
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
	} // Print shortest distance matrix
    printf("The following matrix shows the shortest distances between all pairs of the vertices.\n");
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            if (dist[i][j] == INF)
                printf("%5s", "INF");
            else
                printf("%5d", dist[i][j]);
        }
        printf("\n");
    }

    return 0;
}
